/*@Author: Xiaowei Li*/
/*@Copyright belong to Xiaowei Li and Yiyun Chen*/

#define S_GA
#define S_HG

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include "param.h"
#include "node.h"
#include "random.h"
#include "genetic.h"
#include "matrixCalculator.h"
#include "traverse.h"
#include "Queue.h"


void print_gen(int **gen,Node **node_array){
    int i=0;
    for(;i<POPULATION_SIZE;i++){
        print_solution(gen[i],node_array);
    }
}

int main() {
    
   
    int globalmax_adaptive=0;
    int **originGen=NULL;
    int *fitness=NULL;

    //srand((unsigned int)time(NULL));
    /******* first solution: generate a new graph *******/
    //intialize the gra matrix.
    //initial_graph();
    //get node array from the matrix.
    //Node **node_array = transform_graph();
    //printGraph(node_array);
     
    
    /******* second solution: read configuration from graph.cfg file ********/
    Node **node_array=readGraph();
    printf("read graph is done\n");
   
    originGen = init(node_array);
    fitness=getFitness(node_array,originGen);
     
    globalmax_adaptive=evolution_adaptive(fitness,originGen,node_array);
    printf("adaptive global max fitness is %d\n",globalmax_adaptive);
    
    return 0;
}







